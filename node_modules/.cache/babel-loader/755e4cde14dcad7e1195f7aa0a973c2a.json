{"ast":null,"code":"import axios from \"axios\";\nconst instance = axios.create({\n  baseURL: \"https://www.googleapis.com/books/v1/volumes\"\n});\nexport const bookAPI = {\n  searchBook(searchString, orderBy, category) {\n    if (category != '') {\n      return instance.get(`?maxResults=30&orderBy=${orderBy}&q=${searchString + '+subject:' + category + '&key=AIzaSyBSdsuDMR2_8Rj8oSkDhvYfilF5gPz4e5A'}`);\n    } else {\n      return instance.get(`?maxResults=30&orderBy=${orderBy}&q=${searchString + '&key=AIzaSyBSdsuDMR2_8Rj8oSkDhvYfilF5gPz4e5A'}`);\n    }\n  },\n\n  showBookCard(userId) {\n    return instance.get('/' + userId + '?' + '&key=AIzaSyBSdsuDMR2_8Rj8oSkDhvYfilF5gPz4e5A');\n  },\n\n  loadMoreButton(booksCount, searchString) {\n    return instance.get(`?maxResults=30&startIndex=${booksCount}&q=${searchString}`);\n  }\n\n};\nconst LOAD_BOOK = 'LOAD-BOOK';\nconst LOAD_SEARCH_RESULTS = 'LOAD-SEARCH-RESULTS';\nconst SET_TOTAL_ITEMS = 'SET-TOTAL-ITEMS';\nconst TOGGLE_IS_FETCHING = 'TOGGLE-IS-FETCHING';\nconst SET_BOOK_CARD = 'SET-BOOK-CARD';\nconst LOAD_MORE = 'LOAD-MORE';\nconst SET_FETCH_ERROR = 'SET_FETCH_ERROR';\nconst CLEAN_RESULTS = 'CLEAN-RESULTS';\nlet initialState = {\n  results: [],\n  totalItems: 0,\n  isFetching: true,\n  bookCard: null,\n  isFetchError: false\n};\n\nconst searchResultsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOAD_BOOK:\n      {\n        return { ...state\n        };\n      }\n\n    case LOAD_SEARCH_RESULTS:\n      {\n        return { ...state,\n          results: action.results\n        };\n      }\n\n    case SET_TOTAL_ITEMS:\n      {\n        return { ...state,\n          totalItems: action.totalItems\n        };\n      }\n\n    case TOGGLE_IS_FETCHING:\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case SET_BOOK_CARD:\n      {\n        return { ...state,\n          bookCard: action.bookCard\n        };\n      }\n\n    case LOAD_MORE:\n      {\n        return { ...state,\n          results: [...state.results, ...action.moreBooks]\n        };\n      }\n\n    case SET_FETCH_ERROR:\n      {\n        return { ...state,\n          isFetchError: action.isError\n        };\n      }\n\n    case CLEAN_RESULTS:\n      {\n        return { ...state,\n          results: []\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const loadBook = () => ({\n  type: LOAD_BOOK\n});\nexport const loadSearchResults = results => ({\n  type: LOAD_SEARCH_RESULTS,\n  results\n});\nexport const setTotalItems = totalItems => ({\n  type: SET_TOTAL_ITEMS,\n  totalItems\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const setBookCard = bookCard => ({\n  type: SET_BOOK_CARD,\n  bookCard\n});\nexport const loadMore = moreBooks => ({\n  type: LOAD_MORE,\n  moreBooks\n});\nexport const setFetchError = isError => ({\n  type: SET_FETCH_ERROR,\n  isError\n});\nexport const cleanResults = () => ({\n  type: CLEAN_RESULTS\n});\nexport const startSearchBook = (searchString, orderBy, category) => {\n  return async dispatch => {\n    try {\n      dispatch(setFetchError(false));\n      dispatch(toggleIsFetching(true));\n      let response = await bookAPI.searchBook(searchString, orderBy, category);\n      dispatch(toggleIsFetching(false));\n      dispatch(setTotalItems(response.data.totalItems));\n\n      if (response.data.totalItems != 0) {\n        dispatch(loadSearchResults(response.data.items));\n      } else {\n        dispatch(cleanResults());\n      }\n    } catch (e) {\n      dispatch(setFetchError(true));\n      dispatch(toggleIsFetching(false));\n    }\n  };\n};\nexport const getBookCard = userId => {\n  return async dispatch => {\n    try {\n      dispatch(setFetchError(false));\n      let response = await bookAPI.showBookCard(userId);\n      dispatch(setBookCard(response.data));\n    } catch (e) {\n      dispatch(setFetchError(true));\n      dispatch(toggleIsFetching(false));\n    }\n  };\n};\nexport const loadMoreBooks = (booksCount, previousState, searchString) => {\n  return async dispatch => {\n    try {\n      dispatch(setFetchError(false));\n      let response = await bookAPI.loadMoreButton(booksCount, searchString);\n      dispatch(loadMore(response.data.items, previousState));\n    } catch (e) {\n      dispatch(setFetchError(true));\n      dispatch(toggleIsFetching(false));\n    }\n  };\n};\nexport default searchResultsReducer;","map":{"version":3,"sources":["/Users/amerkanovaasel/Desktop/pr/src/redux/resultReducer.js"],"names":["axios","instance","create","baseURL","bookAPI","searchBook","searchString","orderBy","category","get","showBookCard","userId","loadMoreButton","booksCount","LOAD_BOOK","LOAD_SEARCH_RESULTS","SET_TOTAL_ITEMS","TOGGLE_IS_FETCHING","SET_BOOK_CARD","LOAD_MORE","SET_FETCH_ERROR","CLEAN_RESULTS","initialState","results","totalItems","isFetching","bookCard","isFetchError","searchResultsReducer","state","action","type","moreBooks","isError","loadBook","loadSearchResults","setTotalItems","toggleIsFetching","setBookCard","loadMore","setFetchError","cleanResults","startSearchBook","dispatch","response","data","items","e","getBookCard","loadMoreBooks","previousState"],"mappings":"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","sourcesContent":["import axios from \"axios\"\n\nconst instance = axios.create({\n    baseURL: \"https://www.googleapis.com/books/v1/volumes\",\n})\n\nexport const bookAPI = {\n    searchBook(searchString, orderBy, category) {\n        if (category != '') {\n            return instance.get(`?maxResults=30&orderBy=${orderBy}&q=${(searchString) + '+subject:' + (category) + '&key=AIzaSyBSdsuDMR2_8Rj8oSkDhvYfilF5gPz4e5A'}`)\n        } else {\n            return instance.get(`?maxResults=30&orderBy=${orderBy}&q=${(searchString) + '&key=AIzaSyBSdsuDMR2_8Rj8oSkDhvYfilF5gPz4e5A'}`)\n        }\n    },\n\n    showBookCard(userId) {\n        return instance.get('/' + userId + '?' + '&key=AIzaSyBSdsuDMR2_8Rj8oSkDhvYfilF5gPz4e5A')\n    },\n\n    loadMoreButton(booksCount, searchString) {\n        return instance.get(`?maxResults=30&startIndex=${booksCount}&q=${(searchString)}`)\n    }\n}\n\nconst LOAD_BOOK = 'LOAD-BOOK';\nconst LOAD_SEARCH_RESULTS = 'LOAD-SEARCH-RESULTS';\nconst SET_TOTAL_ITEMS = 'SET-TOTAL-ITEMS';\nconst TOGGLE_IS_FETCHING = 'TOGGLE-IS-FETCHING';\nconst SET_BOOK_CARD = 'SET-BOOK-CARD';\nconst LOAD_MORE = 'LOAD-MORE';\nconst SET_FETCH_ERROR = 'SET_FETCH_ERROR';\nconst CLEAN_RESULTS = 'CLEAN-RESULTS';\n\nlet initialState = {\n    results: [],\n    totalItems: 0,\n    isFetching: true,\n    bookCard: null,\n    isFetchError: false,\n};\n\nconst searchResultsReducer = (state = initialState, action) => {\n    switch (action.type) {\n\n        case LOAD_BOOK: {\n            return {\n                ...state,\n            };\n        }\n        case LOAD_SEARCH_RESULTS: {\n            return {\n                ...state,\n                results: action.results,\n            }\n        }\n\n        case SET_TOTAL_ITEMS: {\n            return {\n                ...state,\n                totalItems: action.totalItems,\n            }\n        }\n\n        case TOGGLE_IS_FETCHING: {\n            return {\n                ...state,\n                isFetching: action.isFetching,\n            }\n        }\n\n        case SET_BOOK_CARD: {\n            return {\n                ...state,\n                bookCard: action.bookCard,\n            }\n        }\n\n        case LOAD_MORE: {\n            return {\n                ...state,\n                results: [...state.results, ...action.moreBooks],\n            }\n        }\n\n        case SET_FETCH_ERROR: {\n            return {\n                ...state,\n                isFetchError: action.isError,\n            }\n        }\n\n        case CLEAN_RESULTS: {\n            return {\n                ...state,\n                results: [],\n            }\n        }\n\n        default:\n            return state;\n    }\n}\n\nexport const loadBook = () => ({ type: LOAD_BOOK });\nexport const loadSearchResults = (results) => ({ type: LOAD_SEARCH_RESULTS, results });\nexport const setTotalItems = (totalItems) => ({ type: SET_TOTAL_ITEMS, totalItems });\nexport const toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching });\nexport const setBookCard = (bookCard) => ({ type: SET_BOOK_CARD, bookCard });\nexport const loadMore = (moreBooks) => ({ type: LOAD_MORE, moreBooks });\nexport const setFetchError = (isError) => ({ type: SET_FETCH_ERROR, isError })\nexport const cleanResults = () => ({ type: CLEAN_RESULTS, })\n\nexport const startSearchBook = (searchString, orderBy, category) => {\n    return async (dispatch) => {\n        try {\n            dispatch(setFetchError(false));\n            dispatch(toggleIsFetching(true));\n            let response = await bookAPI.searchBook(searchString, orderBy, category);\n            dispatch(toggleIsFetching(false));\n            dispatch(setTotalItems(response.data.totalItems));\n            if (response.data.totalItems != 0) {\n                dispatch(loadSearchResults(response.data.items));\n            } else {\n                dispatch(cleanResults());\n            }\n        } catch (e) {\n            dispatch(setFetchError(true));\n            dispatch(toggleIsFetching(false));\n        }\n    }\n}\n\nexport const getBookCard = (userId) => {\n    return async (dispatch) => {\n        try {\n            dispatch(setFetchError(false));\n            let response = await bookAPI.showBookCard(userId);\n            dispatch(setBookCard(response.data));\n        } catch (e) {\n            dispatch(setFetchError(true));\n            dispatch(toggleIsFetching(false));\n        }\n    };\n}\n\nexport const loadMoreBooks = (booksCount, previousState, searchString) => {\n\n    return async (dispatch) => {\n        try {\n            dispatch(setFetchError(false));\n            let response = await bookAPI.loadMoreButton(booksCount, searchString);\n            dispatch(loadMore(response.data.items, previousState));\n        } catch (e) {\n            dispatch(setFetchError(true));\n            dispatch(toggleIsFetching(false));\n        }\n    }\n}\n\nexport default searchResultsReducer;\n\n"]},"metadata":{},"sourceType":"module"}